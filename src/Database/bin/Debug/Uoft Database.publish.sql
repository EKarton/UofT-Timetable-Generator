/*
Deployment script for UoftDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "UoftDatabase"
:setvar DefaultFilePrefix "UoftDatabase"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file e945f29e-429b-4155-924c-81005400e0e2';

PRINT N'Rename [dbo].[Time].[SessionID] to ActivityID';


GO
EXECUTE sp_rename @objname = N'[dbo].[Time].[SessionID]', @newname = N'ActivityID', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 64942588-9b66-4bf3-a46a-7623b537f62a';

PRINT N'Rename [dbo].[Activity].[ActivityID] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Activity].[ActivityID]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 7fd2f2ca-a9ef-4cea-92d8-98ce10bcc770';

PRINT N'Rename [dbo].[Building].[BuildingID] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Building].[BuildingID]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 102102eb-013b-4e63-86f8-dc3ad7a8f685';

PRINT N'Rename [dbo].[Course].[CourseID] to Id';


GO
EXECUTE sp_rename @objname = N'[dbo].[Course].[CourseID]', @newname = N'Id', @objtype = N'COLUMN';


GO
PRINT N'Creating [dbo].[ActivityInstructor]...';


GO
CREATE TABLE [dbo].[ActivityInstructor] (
    [Id]           INT NOT NULL,
    [InstructorID] INT NOT NULL,
    [ActivityID]   INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Session]...';


GO
CREATE TABLE [dbo].[Session] (
    [Id]         INT        NOT NULL,
    [ActivityID] INT        NOT NULL,
    [BuildingID] INT        NULL,
    [StartTime]  FLOAT (53) NULL,
    [EndTime]    FLOAT (53) NULL,
    [Weekday]    TINYINT    NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Session]...';


GO
ALTER TABLE [dbo].[Session]
    ADD DEFAULT 1 FOR [Weekday];


GO
PRINT N'Creating unnamed constraint on [dbo].[ActivityInstructor]...';


GO
ALTER TABLE [dbo].[ActivityInstructor] WITH NOCHECK
    ADD FOREIGN KEY ([InstructorID]) REFERENCES [dbo].[Instructor] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[ActivityInstructor]...';


GO
ALTER TABLE [dbo].[ActivityInstructor] WITH NOCHECK
    ADD FOREIGN KEY ([ActivityID]) REFERENCES [dbo].[Activity] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Session]...';


GO
ALTER TABLE [dbo].[Session] WITH NOCHECK
    ADD FOREIGN KEY ([ActivityID]) REFERENCES [dbo].[Activity] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Session]...';


GO
ALTER TABLE [dbo].[Session] WITH NOCHECK
    ADD FOREIGN KEY ([BuildingID]) REFERENCES [dbo].[Building] ([Id]);


GO
PRINT N'Creating [dbo].[Session].[Weekday].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Session', @level2type = N'COLUMN', @level2name = N'Weekday';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e945f29e-429b-4155-924c-81005400e0e2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e945f29e-429b-4155-924c-81005400e0e2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '64942588-9b66-4bf3-a46a-7623b537f62a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('64942588-9b66-4bf3-a46a-7623b537f62a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7fd2f2ca-a9ef-4cea-92d8-98ce10bcc770')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7fd2f2ca-a9ef-4cea-92d8-98ce10bcc770')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '102102eb-013b-4e63-86f8-dc3ad7a8f685')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('102102eb-013b-4e63-86f8-dc3ad7a8f685')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.ActivityInstructor'), OBJECT_ID(N'dbo.Session'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
