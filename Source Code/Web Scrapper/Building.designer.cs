#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web_Scrapper
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UoftDatabase")]
	public partial class BuildingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBuilding(Building instance);
    partial void UpdateBuilding(Building instance);
    partial void DeleteBuilding(Building instance);
    partial void InsertBuildingDistance(BuildingDistance instance);
    partial void UpdateBuildingDistance(BuildingDistance instance);
    partial void DeleteBuildingDistance(BuildingDistance instance);
    #endregion
		
		public BuildingDataContext() : 
				base(global::Web_Scrapper.Properties.Settings.Default.UoftDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BuildingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BuildingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BuildingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BuildingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Building> Buildings
		{
			get
			{
				return this.GetTable<Building>();
			}
		}
		
		public System.Data.Linq.Table<BuildingDistance> BuildingDistances
		{
			get
			{
				return this.GetTable<BuildingDistance>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Building")]
	public partial class Building : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BuildingName;
		
		private string _BuildingCode;
		
		private string _Address;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private EntitySet<BuildingDistance> _BuildingDistances;
		
		private EntitySet<BuildingDistance> _BuildingDistances1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBuildingNameChanging(string value);
    partial void OnBuildingNameChanged();
    partial void OnBuildingCodeChanging(string value);
    partial void OnBuildingCodeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Building()
		{
			this._BuildingDistances = new EntitySet<BuildingDistance>(new Action<BuildingDistance>(this.attach_BuildingDistances), new Action<BuildingDistance>(this.detach_BuildingDistances));
			this._BuildingDistances1 = new EntitySet<BuildingDistance>(new Action<BuildingDistance>(this.attach_BuildingDistances1), new Action<BuildingDistance>(this.detach_BuildingDistances1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingName", DbType="NVarChar(MAX)")]
		public string BuildingName
		{
			get
			{
				return this._BuildingName;
			}
			set
			{
				if ((this._BuildingName != value))
				{
					this.OnBuildingNameChanging(value);
					this.SendPropertyChanging();
					this._BuildingName = value;
					this.SendPropertyChanged("BuildingName");
					this.OnBuildingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingCode", DbType="NVarChar(2)")]
		public string BuildingCode
		{
			get
			{
				return this._BuildingCode;
			}
			set
			{
				if ((this._BuildingCode != value))
				{
					this.OnBuildingCodeChanging(value);
					this.SendPropertyChanging();
					this._BuildingCode = value;
					this.SendPropertyChanged("BuildingCode");
					this.OnBuildingCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_BuildingDistance", Storage="_BuildingDistances", ThisKey="Id", OtherKey="BuildingID1")]
		public EntitySet<BuildingDistance> BuildingDistances
		{
			get
			{
				return this._BuildingDistances;
			}
			set
			{
				this._BuildingDistances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_BuildingDistance1", Storage="_BuildingDistances1", ThisKey="Id", OtherKey="BuildingID2")]
		public EntitySet<BuildingDistance> BuildingDistances1
		{
			get
			{
				return this._BuildingDistances1;
			}
			set
			{
				this._BuildingDistances1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuildingDistances(BuildingDistance entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_BuildingDistances(BuildingDistance entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
		
		private void attach_BuildingDistances1(BuildingDistance entity)
		{
			this.SendPropertyChanging();
			entity.Building1 = this;
		}
		
		private void detach_BuildingDistances1(BuildingDistance entity)
		{
			this.SendPropertyChanging();
			entity.Building1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuildingDistances")]
	public partial class BuildingDistance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BuildingID1;
		
		private int _BuildingID2;
		
		private System.Nullable<double> _WalkingDuration;
		
		private System.Nullable<double> _WalkingDistance;
		
		private System.Nullable<double> _TransitDuration;
		
		private System.Nullable<double> _TransitDistance;
		
		private System.Nullable<double> _CyclingDuration;
		
		private System.Nullable<double> _CyclingDistance;
		
		private System.Nullable<double> _VehicleDuration;
		
		private System.Nullable<double> _VehicleDistance;
		
		private EntityRef<Building> _Building;
		
		private EntityRef<Building> _Building1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBuildingID1Changing(int value);
    partial void OnBuildingID1Changed();
    partial void OnBuildingID2Changing(int value);
    partial void OnBuildingID2Changed();
    partial void OnWalkingDurationChanging(System.Nullable<double> value);
    partial void OnWalkingDurationChanged();
    partial void OnWalkingDistanceChanging(System.Nullable<double> value);
    partial void OnWalkingDistanceChanged();
    partial void OnTransitDurationChanging(System.Nullable<double> value);
    partial void OnTransitDurationChanged();
    partial void OnTransitDistanceChanging(System.Nullable<double> value);
    partial void OnTransitDistanceChanged();
    partial void OnCyclingDurationChanging(System.Nullable<double> value);
    partial void OnCyclingDurationChanged();
    partial void OnCyclingDistanceChanging(System.Nullable<double> value);
    partial void OnCyclingDistanceChanged();
    partial void OnVehicleDurationChanging(System.Nullable<double> value);
    partial void OnVehicleDurationChanged();
    partial void OnVehicleDistanceChanging(System.Nullable<double> value);
    partial void OnVehicleDistanceChanged();
    #endregion
		
		public BuildingDistance()
		{
			this._Building = default(EntityRef<Building>);
			this._Building1 = default(EntityRef<Building>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingID1", DbType="Int NOT NULL")]
		public int BuildingID1
		{
			get
			{
				return this._BuildingID1;
			}
			set
			{
				if ((this._BuildingID1 != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingID1Changing(value);
					this.SendPropertyChanging();
					this._BuildingID1 = value;
					this.SendPropertyChanged("BuildingID1");
					this.OnBuildingID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingID2", DbType="Int NOT NULL")]
		public int BuildingID2
		{
			get
			{
				return this._BuildingID2;
			}
			set
			{
				if ((this._BuildingID2 != value))
				{
					if (this._Building1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingID2Changing(value);
					this.SendPropertyChanging();
					this._BuildingID2 = value;
					this.SendPropertyChanged("BuildingID2");
					this.OnBuildingID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkingDuration", DbType="Float")]
		public System.Nullable<double> WalkingDuration
		{
			get
			{
				return this._WalkingDuration;
			}
			set
			{
				if ((this._WalkingDuration != value))
				{
					this.OnWalkingDurationChanging(value);
					this.SendPropertyChanging();
					this._WalkingDuration = value;
					this.SendPropertyChanged("WalkingDuration");
					this.OnWalkingDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalkingDistance", DbType="Float")]
		public System.Nullable<double> WalkingDistance
		{
			get
			{
				return this._WalkingDistance;
			}
			set
			{
				if ((this._WalkingDistance != value))
				{
					this.OnWalkingDistanceChanging(value);
					this.SendPropertyChanging();
					this._WalkingDistance = value;
					this.SendPropertyChanged("WalkingDistance");
					this.OnWalkingDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransitDuration", DbType="Float")]
		public System.Nullable<double> TransitDuration
		{
			get
			{
				return this._TransitDuration;
			}
			set
			{
				if ((this._TransitDuration != value))
				{
					this.OnTransitDurationChanging(value);
					this.SendPropertyChanging();
					this._TransitDuration = value;
					this.SendPropertyChanged("TransitDuration");
					this.OnTransitDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransitDistance", DbType="Float")]
		public System.Nullable<double> TransitDistance
		{
			get
			{
				return this._TransitDistance;
			}
			set
			{
				if ((this._TransitDistance != value))
				{
					this.OnTransitDistanceChanging(value);
					this.SendPropertyChanging();
					this._TransitDistance = value;
					this.SendPropertyChanged("TransitDistance");
					this.OnTransitDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CyclingDuration", DbType="Float")]
		public System.Nullable<double> CyclingDuration
		{
			get
			{
				return this._CyclingDuration;
			}
			set
			{
				if ((this._CyclingDuration != value))
				{
					this.OnCyclingDurationChanging(value);
					this.SendPropertyChanging();
					this._CyclingDuration = value;
					this.SendPropertyChanged("CyclingDuration");
					this.OnCyclingDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CyclingDistance", DbType="Float")]
		public System.Nullable<double> CyclingDistance
		{
			get
			{
				return this._CyclingDistance;
			}
			set
			{
				if ((this._CyclingDistance != value))
				{
					this.OnCyclingDistanceChanging(value);
					this.SendPropertyChanging();
					this._CyclingDistance = value;
					this.SendPropertyChanged("CyclingDistance");
					this.OnCyclingDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleDuration", DbType="Float")]
		public System.Nullable<double> VehicleDuration
		{
			get
			{
				return this._VehicleDuration;
			}
			set
			{
				if ((this._VehicleDuration != value))
				{
					this.OnVehicleDurationChanging(value);
					this.SendPropertyChanging();
					this._VehicleDuration = value;
					this.SendPropertyChanged("VehicleDuration");
					this.OnVehicleDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleDistance", DbType="Float")]
		public System.Nullable<double> VehicleDistance
		{
			get
			{
				return this._VehicleDistance;
			}
			set
			{
				if ((this._VehicleDistance != value))
				{
					this.OnVehicleDistanceChanging(value);
					this.SendPropertyChanging();
					this._VehicleDistance = value;
					this.SendPropertyChanged("VehicleDistance");
					this.OnVehicleDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_BuildingDistance", Storage="_Building", ThisKey="BuildingID1", OtherKey="Id", IsForeignKey=true)]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.BuildingDistances.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.BuildingDistances.Add(this);
						this._BuildingID1 = value.Id;
					}
					else
					{
						this._BuildingID1 = default(int);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_BuildingDistance1", Storage="_Building1", ThisKey="BuildingID2", OtherKey="Id", IsForeignKey=true)]
		public Building Building1
		{
			get
			{
				return this._Building1.Entity;
			}
			set
			{
				Building previousValue = this._Building1.Entity;
				if (((previousValue != value) 
							|| (this._Building1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building1.Entity = null;
						previousValue.BuildingDistances1.Remove(this);
					}
					this._Building1.Entity = value;
					if ((value != null))
					{
						value.BuildingDistances1.Add(this);
						this._BuildingID2 = value.Id;
					}
					else
					{
						this._BuildingID2 = default(int);
					}
					this.SendPropertyChanged("Building1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
